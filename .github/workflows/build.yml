name: build

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: repo

    - name: Download auls_memref
      shell: pwsh
      run: |
        Invoke-WebRequest https://auls.client.jp/plugin/auls_memref.zip -OutFile auls_memref.zip
        Expand-Archive -LiteralPath auls_memref.zip -DestinationPath auls_memref

    - name: Check hash
      shell: pwsh
      run: |
        & repo/patch.ps1 check auls_memref/auls_memref/auls_memref.auf

    - name: Apply patch
      shell: pwsh
      run: |
        & repo/patch.ps1 apply auls_memref/auls_memref/auls_memref.auf

    - name: Copy information
      shell: pwsh
      run: |
        Copy-Item -LiteralPath repo/patch.txt -Destination auls_memref/auls_memref
       
    - name: Create Archive
      shell: pwsh
      run: |
        mkdir pub
        Compress-Archive -LiteralPath auls_memref/auls_memref -DestinationPath pub/auls_memref.zip

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: auls_memref_patched
        path: pub/auls_memref.zip

  create_release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: repo

    - uses: actions/download-artifact@v4
      with:
        name: auls_memref_patched
        path: artifacts

    - name: Set Name
      id: set-name
      shell: pwsh
      run: |
        $t = Get-Date -AsUTC -Format "yyyy-MM-dd_HH-mm"
        "Name=$t" >> $env:GITHUB_OUTPUT

    - name: Create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: pwsh
      run: |
        $ReleaseName = '${{ steps.set-name.outputs.Name }}'
        $TagName = '${{ steps.set-name.outputs.Name }}'
        cd repo
        gh release create `"$TagName`" ../artifacts/auls_memref.zip --title `"$ReleaseName`"
